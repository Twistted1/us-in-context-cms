import React, { useState, useMemo, useCallback } from 'react';
import { Twitter, Instagram, Facebook, Linkedin, Globe, Youtube, Clapperboard, CheckCircle, Download, Calendar, ArrowLeft, ArrowRight, Eye, GanttChartSquare, BotMessageSquare, Rss, Layers3 } from 'lucide-react';

// THE FINAL MERGED AND CORRECTED APP.JSX

function App() {
    const [activeTab, setActiveTab] = useState('X-Twitter');
    const [completedTasks, setCompletedTasks] = useState([]);
    const [currentDate] = useState(new Date()); // Live date will be calculated on render

    const [currentWeeks, setCurrentWeeks] = useState({
        'X-Twitter': 1, 'Instagram': 1, 'Facebook': 1, 'LinkedIn': 1,
        'Website': 1, 'YouTube': 1, 'TikTok': 1,
    });

    // NOTE: This is the full data structure. Paste your complete content strategy here.
    const strategies = useMemo(() => ({
        'X-Twitter': { week1: { day1: "Post 1 about economic indicators", day2: "Post 2 engaging question", day3: "Post 3 myth busting", day4: "Post 4 data visualization", day5: "Post 5 expert quote", day6: "Post 6 weekend reading link", day7: "Post 7 weekly summary" }, week2: { day1: "Post 1 on inflation" }, week3: { day1: "Post 1 on fiscal policy" }, week4: { day1: "Post 1 on trade deficits" } },
        'Instagram': { week1: { post1: "Carousel on UK economy basics", post2: "Reel explaining GDP" }, week2: { post1: "Carousel on inflation" }, week3: { post1: "Carousel on government spending" }, week4: { post1: "Carousel on global trade" } },
        'Facebook': { week1: { post1: "Link to website article with discussion prompt", post2: "Short video" }, week2: { post1: "Link to inflation article" }, week3: { post1: "Link to article on UK's budget" }, week4: { post1: "Link to article on future trends" } },
        'LinkedIn': { week1: { post1: "Article summary on UK's economic outlook", post2: "Thought leadership piece" }, week2: { post1: "Deep dive into a policy change" }, week3: { post1: "Analysis of a successful strategy" }, week4: { post1: "Future-focused article on AI" } },
        'Website': { week1: { article1: "The UK's Q3 Economic Performance", article2: "Understanding Inflation" }, week2: { article1: "How Government Policy is Shaping the Market" }, week3: { article1: "Sustainable Investment: A UK Perspective" }, week4: { article1: "Economic Predictions" } },
        'YouTube': { week1: { video1: "Explainer: What is GDP?", video2: "Interview with an Economist" }, week2: { video1: "Visualizing Inflation" }, week3: { video1: "Top 5 Economic Myths Debunked" }, week4: { video1: "Economic Forecasting for Dummies" } },
        'TikTok': { week1: { video1: "15-second explainer on inflation." }, week2: { video1: "Quick tip for spotting trends." }, week3: { video1: "One term you should know." }, week4: { video1: "Surprising fact about UK economy." } }
    }), []);

    const platformData = useMemo(() => Object.fromEntries(
        Object.entries(strategies).map(([platform, content]) => [
            platform, {
                content,
                total: Object.values(content).reduce((acc, week) => acc + Object.keys(week).length, 0),
                weeks: Object.keys(content).length,
            }
        ])
    ), [strategies]);

    const handleWeekChange = useCallback((platform, direction) => {
        setCurrentWeeks(prev => ({ ...prev, [platform]: Math.max(1, Math.min(platformData[platform].weeks, prev[platform] + direction)) }));
    }, [platformData]);

    const toggleTask = useCallback((taskId) => {
        setCompletedTasks(prev => prev.includes(taskId) ? prev.filter(id => id !== taskId) : [...prev, taskId]);
    }, []);

    const getProgress = useCallback((platform) => {
        const platformInfo = platformData[platform];
        if (!platformInfo || platformInfo.total === 0) return 0;
        const completedPlatformTasks = completedTasks.filter(taskId => taskId.startsWith(`${platform}-`));
        return (completedPlatformTasks.length / platformInfo.total) * 100;
    }, [completedTasks, platformData]);
    
    const exportToCSV = useCallback(() => {
        let csvContent = "data:text/csv;charset=utf-8,Platform,Week,Task Key,Content,Status\n";
        for (const platform in strategies) {
            for (const week in strategies[platform]) {
                for (const key in strategies[platform][week]) {
                    const taskId = `${platform}-${week}-${key}`;
                    const content = strategies[platform][week][key].replace(/"/g, '""');
                    const status = completedTasks.includes(taskId) ? "Completed" : "Pending";
                    csvContent += `"${platform}","${week}","${key}","${content}","${status}"\n`;
                }
            }
        }
        const encodedUri = encodeURI(csvContent);
        const link = document.createElement("a");
        link.setAttribute("href", encodedUri);
        link.setAttribute("download", "content_calendar.csv");
        document.body.appendChild(link);
        link.click();
        document.body.removeChild(link);
    }, [strategies, completedTasks]);

    const renderWeekNavigation = (platform) => {
        const { weeks } = platformData[platform];
        const currentWeek = currentWeeks[platform];
        if (weeks <= 1) return null;
        return ( <div className="flex items-center justify-center space-x-4 my-4"> <button onClick={() => handleWeekChange(platform, -1)} disabled={currentWeek === 1} className="p-2 rounded-md bg-gray-200 hover:bg-gray-300 disabled:opacity-50"><ArrowLeft size={16} /></button> <span className="font-semibold">Week {currentWeek}</span> <button onClick={() => handleWeekChange(platform, 1)} disabled={currentWeek === weeks} className="p-2 rounded-md bg-gray-200 hover:bg-gray-300 disabled:opacity-50"><ArrowRight size={16} /></button> </div> );
    };

    const renderContent = () => {
        const platformInfo = platformData[activeTab];
        if (!platformInfo) return null;
        const currentWeek = currentWeeks[activeTab];
        const weekContent = platformInfo.content[`week${currentWeek}`];
        if (!weekContent) return <div className="text-center text-gray-500 py-8">No content for this week.</div>;
        return ( <div> {renderWeekNavigation(activeTab)} <ul className="space-y-3"> {Object.entries(weekContent).map(([key, value]) => { const taskId = `${activeTab}-week${currentWeek}-${key}`; const isCompleted = completedTasks.includes(taskId); return ( <li key={taskId} className="p-4 bg-gray-50 dark:bg-gray-700/50 rounded-lg shadow-sm border border-gray-200 dark:border-gray-700 flex items-center justify-between"> <div className="flex items-center"> <button onClick={() => toggleTask(taskId)} className="mr-4 flex-shrink-0"> <CheckCircle size={24} className={`transition-colors ${isCompleted ? "text-green-500" : "text-gray-300 hover:text-gray-400"}`} /> </button> <div> <span className="font-bold text-gray-600 dark:text-gray-300 uppercase text-sm">{key.replace(/([A-Z])/g, ' $1').trim()}</span> <p className="text-gray-800 dark:text-gray-100">{value}</p> </div> </div> </li> ); })} </ul> </div> );
    };

    const tabs = useMemo(() => [
        { name: 'X-Twitter', icon: Twitter }, { name: 'Instagram', icon: Instagram }, { name: 'Facebook', icon: Facebook },
        { name: 'LinkedIn', icon: Linkedin }, { name: 'Website', icon: Globe }, { name: 'YouTube', icon: Youtube },
        { name: 'TikTok', icon: Clapperboard },
    ], []);

    const { totalTasks, totalProgress } = useMemo(() => {
        const total = Object.values(platformData).reduce((sum, p) => sum + p.total, 0);
        const progress = total === 0 ? 0 : (completedTasks.length / total) * 100;
        return { totalTasks: total, totalProgress: progress };
    }, [completedTasks, platformData]);

    const formattedDate = new Intl.DateTimeFormat('en-US', { dateStyle: 'full' }).format(currentDate);

    return (
        <div className="bg-gray-100 dark:bg-gray-900 min-h-screen font-sans text-gray-800 dark:text-gray-200">
            <div className="max-w-7xl mx-auto p-4 sm:p-6 lg:p-8">
                <header className="mb-8">
                    <h1 className="text-4xl font-bold text-gray-900 dark:text-white">Us In Context - CMS</h1>
                    <p className="text-gray-600 dark:text-gray-400 mt-1">{formattedDate}</p>
                </header>

                <div className="mb-8 p-4 bg-white dark:bg-gray-800 rounded-lg shadow-md border border-gray-200 dark:border-gray-700">
                    <h2 className="text-lg font-semibold mb-2 text-gray-700 dark:text-gray-200">Overall Progress ({completedTasks.length} / {totalTasks})</h2>
                    <div className="w-full bg-gray-200 dark:bg-gray-700 rounded-full h-4 overflow-hidden">
                        <div className="bg-blue-600 h-4 rounded-full transition-all duration-500" style={{ width: `${totalProgress}%` }}></div>
                    </div>
                </div>
                
                <div className="lg:grid lg:grid-cols-12 lg:gap-8">
                    <aside className="lg:col-span-3 mb-8 lg:mb-0">
                        <h3 className="text-xl font-semibold mb-4 text-gray-800 dark:text-white">Platforms</h3>
                        <div className="space-y-2">
                            {tabs.map(tab => (
                                <button key={tab.name} onClick={() => setActiveTab(tab.name)} className={`w-full text-left p-3 rounded-md flex items-center justify-between transition-all duration-200 ${activeTab === tab.name ? 'bg-blue-600 text-white shadow' : 'bg-white dark:bg-gray-800 hover:bg-gray-100 dark:hover:bg-gray-700 text-gray-700 dark:text-gray-200 border dark:border-gray-700'}`}>
                                    <div className="flex items-center">
                                        <tab.icon size={20} className="mr-3" />
                                        <span className="font-semibold">{tab.name}</span>
                                    </div>
                                    <span className="text-xs font-mono bg-gray-200 dark:bg-gray-600 px-2 py-1 rounded">{Math.round(getProgress(tab.name))}%</span>
                                </button>
                            ))}
                        </div>
                    </aside>

                    <main className="lg:col-span-9">
                        <div className="bg-white dark:bg-gray-800 p-4 sm:p-6 rounded-lg shadow-md border border-gray-200 dark:border-gray-700">
                            <h2 className="text-2xl font-bold mb-4 text-gray-900 dark:text-white">{activeTab} Content Plan</h2>
                            {renderContent()}
                        </div>
                        
                        <div className="mt-8 bg-white dark:bg-gray-800 p-6 rounded-lg shadow-md border border-gray-200 dark:border-gray-700">
                            <h3 className="text-xl font-semibold mb-4 text-gray-800 dark:text-white">Enhanced Quick Actions</h3>
                            <div className="grid grid-cols-1 md:grid-cols-2 gap-3">
                                {/* Placeholders for Future Features */}
                                <button className="text-left p-4 rounded-lg flex items-center bg-blue-50 dark:bg-blue-900/50 hover:bg-blue-100 dark:hover:bg-blue-900 text-blue-700 dark:text-blue-300"> <GanttChartSquare size={20} className="mr-4"/> Add Gantt Chart </button>
                                <button className="text-left p-4 rounded-lg flex items-center bg-purple-50 dark:bg-purple-900/50 hover:bg-purple-100 dark:hover:bg-purple-900 text-purple-700 dark:text-purple-300"> <Eye size={20} className="mr-4"/> Content Preview </button>
                                <button className="text-left p-4 rounded-lg flex items-center bg-green-50 dark:bg-green-900/50 hover:bg-green-100 dark:hover:bg-green-900 text-green-700 dark:text-green-300"> <Calendar size={20} className="mr-4"/> Enable Calendar Sync </button>
                                <button className="text-left p-4 rounded-lg flex items-center bg-indigo-50 dark:bg-indigo-900/50 hover:bg-indigo-100 dark:hover:bg-indigo-900 text-indigo-700 dark:text-indigo-300"> <BotMessageSquare size={20} className="mr-4"/> Claude AI Assist </button>
                                <button className="text-left p-4 rounded-lg flex items-center bg-teal-50 dark:bg-teal-900/50 hover:bg-teal-100 dark:hover:bg-teal-900 text-teal-700 dark:text-teal-300"> <Rss size={20} className="mr-4"/> API Connections </button>
                                <button className="text-left p-4 rounded-lg flex items-center bg-sky-50 dark:bg-sky-900/50 hover:bg-sky-100 dark:hover:bg-sky-900 text-sky-700 dark:text-sky-300"> <Layers3 size={20} className="mr-4"/> Content Templates </button>
                                <button onClick={exportToCSV} className="md:col-span-2 text-left p-4 rounded-lg flex items-center bg-orange-50 dark:bg-orange-900/50 hover:bg-orange-100 dark:hover:bg-orange-900 text-orange-700 dark:text-orange-300 transition-all duration-200 font-semibold">
                                   <Download size={20} className="mr-4"/> Export Full Content Calendar
                                </button>
                            </div>
                        </div>
                    </main>
                </div>
            </div>
        </div>
    );
}

export default App;